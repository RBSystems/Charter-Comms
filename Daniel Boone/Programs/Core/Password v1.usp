/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: Heavenly Solutions
System Name:
System Number:
Programmer: Rodney France
Comments: No idea where I got this *MAD
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
#SYMBOL_NAME "Password v1"
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #DEFAULT_VOLATILE
#DEFAULT_NONVOLATILE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Enter_Password, Clear_Number, New_Password, Exit_Password, Lock_Panel,
							EnterNeeded, ShowAsterisk;

ANALOG_INPUT Password_Number, Password_Max_Len;

STRING_INPUT Backdoor_Password$[6];

//BUFFER_INPUT 

DIGITAL_OUTPUT Password_Correct, New_Password_Fb, New_Password_Req, Panel_Locked, Password_Page_Flip;

//ANALOG_OUTPUT 

STRING_OUTPUT Password_Txt$;

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
*******************************************************************************************/
INTEGER Password_Len, New_Password_Len;

#DEFAULT_NONVOLATILE STRING Password_Entered$[20], New_Password$[20], New_Password_Entered$[20],
       Private_Password$[20];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Enter_Password
{
	IF(((Password_Entered$ = Backdoor_Password$) || (Password_Entered$ = New_Password$))&(New_Password_Fb = OFF))
	{
		IF((New_Password_Fb = OFF) & (New_Password_Req = ON))
		{
			New_Password_Req = OFF;
			New_Password_Fb = ON;
			Password_Entered$ = "";
			Private_Password$ = "";
			Password_Txt$ = "Enter New Passcode";
		}
		ELSE
		{
			PULSE(30,Password_Correct);
			Panel_Locked = OFF;
			Password_Entered$ = "";
			Private_Password$ = "";
			Password_Txt$ = "Correct!";
			WAIT(200)
				Password_Txt$ = "Enter Passcode";
		}
	}
	ELSE IF((New_Password_Fb = ON) && (New_Password_Req = OFF))
	{
		New_Password$ = New_Password_Entered$;
		New_Password_Fb = OFF;
		Password_Entered$ = "";
		Private_Password$ = "";
		New_Password_Entered$ = "";
		Password_Txt$ = "New Passcode Stored";
		WAIT(200)
		{
			Password_Txt$ = "";
			Password_Txt$ = "Enter Current Passcode";
		}
	}
	ELSE IF((New_Password_Req = ON))
	{
		Password_Txt$ = "Invalid Passcode\rPlease Try Again";
		Password_Entered$ = "";
		Private_Password$ = "";
		WAIT(200)
			Password_Txt$ = "Enter Current Passcode";
	}
	ELSE
	{
		Password_Txt$ = "Invalid Passcode\rPlease Try Again";
		Password_Entered$ = "";
		Private_Password$ = "";
		WAIT(200)
			Password_Txt$ = "Enter Passcode";
	}
}

PUSH Clear_Number
{
	Password_Entered$ = "";
	Private_Password$ = "";
	New_Password_Entered$ = "";
	Password_Txt$ = "Enter Passcode";
}

PUSH Exit_Password
{
	Password_Entered$ = "";
	Private_Password$ = "";
	New_Password_Entered$ = "";
	New_Password_Req = OFF;
	New_Password_Fb = OFF;
	Password_Txt$ = "Enter Passcode";
}

PUSH New_Password
{
	IF((New_Password_Req = ON))
	{
		New_Password_Req = OFF;
		Password_Entered$ = "";
		Private_Password$ = "";
		Password_Txt$ = "Enter Current Passcode";
	}
	ELSE
	{
		New_Password_Req = ON;
		Password_Entered$ = "";
		Private_Password$ = "";
		Password_Txt$ = "Enter Current Passcode";
	}
}

PUSH Lock_Panel
{
	IF(Panel_Locked = ON)
	{
		PULSE(30, Password_Page_Flip);
	}
	ELSE
	{
		Panel_Locked = ON;
	}
}



CHANGE Password_Number
{
	Password_Len = Len(Password_Entered$) + 1;
	New_Password_Len = Len(New_Password_Entered$) + 1;
	IF((Password_Len < Password_Max_Len + 1) && (New_Password_Len < Password_Max_Len + 1))
	{
		Private_Password$ = Private_Password$ + "*";
		IF(New_Password_Fb = OFF)
		{
			SWITCH(Password_Number)
			{
				CASE(48):{Password_Entered$ = Password_Entered$ + "0";}
				CASE(49):{Password_Entered$ = Password_Entered$ + "1";}
				CASE(50):{Password_Entered$ = Password_Entered$ + "2";}
				CASE(51):{Password_Entered$ = Password_Entered$ + "3";}
				CASE(52):{Password_Entered$ = Password_Entered$ + "4";}
				CASE(53):{Password_Entered$ = Password_Entered$ + "5";}
				CASE(54):{Password_Entered$ = Password_Entered$ + "6";}
				CASE(55):{Password_Entered$ = Password_Entered$ + "7";}
				CASE(56):{Password_Entered$ = Password_Entered$ + "8";}
				CASE(57):{Password_Entered$ = Password_Entered$ + "9";}
			}
			IF(ShowAsterisk)
			{
				Password_Txt$ = Private_Password$;
			}
			ELSE
			{
				Password_Txt$ = Password_Entered$;
			}
		}
		ELSE IF((New_Password_Fb = ON) && (New_Password_Req = OFF))
		{
			SWITCH(Password_Number)
			{
				CASE(48):{New_Password_Entered$ = New_Password_Entered$ + "0";}
				CASE(49):{New_Password_Entered$ = New_Password_Entered$ + "1";}
				CASE(50):{New_Password_Entered$ = New_Password_Entered$ + "2";}
				CASE(51):{New_Password_Entered$ = New_Password_Entered$ + "3";}
				CASE(52):{New_Password_Entered$ = New_Password_Entered$ + "4";}
				CASE(53):{New_Password_Entered$ = New_Password_Entered$ + "5";}
				CASE(54):{New_Password_Entered$ = New_Password_Entered$ + "6";}
				CASE(55):{New_Password_Entered$ = New_Password_Entered$ + "7";}
				CASE(56):{New_Password_Entered$ = New_Password_Entered$ + "8";}
				CASE(57):{New_Password_Entered$ = New_Password_Entered$ + "9";}
			}
			Password_Txt$ = New_Password_Entered$;
		}
	}
	ELSE
	{
		Password_Txt$ = "Maxium Number Of\rDigits = " + ITOA(Password_Max_Len);
		WAIT(200)
		{
			IF(New_Password_Fb = OFF)
			{
				IF(ShowAsterisk)
				{
					Password_Txt$ = Private_Password$;
				}
				ELSE
				{
					Password_Txt$ = Password_Entered$;
				}
			}
			ELSE IF((New_Password_Fb = ON) && (New_Password_Req = OFF))
			{
				Password_Txt$ = New_Password_Entered$;
			}
		}
	}
	IF(EnterNeeded = OFF)
	{
		IF(((Password_Entered$ = Backdoor_Password$) || (Password_Entered$ = New_Password$)) && (New_Password_Fb = OFF))
		{
			IF((New_Password_Fb = OFF) && (New_Password_Req = ON))
			{
				New_Password_Req = OFF;
				New_Password_Fb = ON;
				Password_Entered$ = "";
				Private_Password$ = "";
				Password_Txt$ = "Enter New Passcode";
			}
			ELSE
			{
				PULSE(30,Password_Correct);
				Panel_Locked = OFF;
				Password_Entered$ = "";
				Private_Password$ = "";
				Password_Txt$ = "Correct!";
				WAIT(200)
					Password_Txt$ = "Enter Passcode";
			}
		}
		ELSE IF((Password_Len = Password_Max_Len + 1) || (New_Password_Len = Password_Max_Len + 1))
		{
		
			IF((New_Password_Fb = ON) && (New_Password_Req = OFF))
			{
				New_Password$ = New_Password_Entered$;
				New_Password_Fb = OFF;
				Password_Entered$ = "";
				New_Password_Entered$ = "";
				Private_Password$ = "";
				Password_Txt$ = "New Passcode Stored";
				WAIT(200)
				{
					Password_Txt$ = "";
					Password_Txt$ = "Enter Current Passcode";
				}
			}
			ELSE IF((New_Password_Req = ON))
			{
				Password_Txt$ = "Invalid Passcode\rPlease Try Again";
				Password_Entered$ = "";
				Private_Password$ = "";
				WAIT(200)
					Password_Txt$ = "Enter Passcode";
			}
			ELSE            
			{
				Password_Txt$ = "Invalid Passcode\rPlease Try Again";
				Password_Entered$ = "";
				Private_Password$ = "";
				WAIT(200)
					Password_Txt$ = "Enter Passcode";
			}
		}
	}
}


/*
EVENT
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	Password_Entered$ = "";
	New_Password_Entered$ = "";
	New_Password_Req = OFF;
	New_Password_Fb = OFF;
	Password_Txt$ = "Enter Passcode";
	//New_Password$ = "000000";
	Panel_Locked = OFF;
	Private_Password$ = "";
}


